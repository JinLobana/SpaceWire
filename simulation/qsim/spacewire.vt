// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2023 20:34:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    spacewire
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spacewire_vlg_sample_tst(
	CLK,
	dff_reset,
	SpWR_linkstart,
	sampler_tx
);
input  CLK;
input  dff_reset;
input  SpWR_linkstart;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or dff_reset or SpWR_linkstart)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module spacewire_vlg_check_tst (
	DataRecv,
	LEDOutput,
	SpWR_connecting,
	SpWR_do,
	SpWR_running,
	SpWR_rxFlag,
	SpWR_rxValid,
	SpWR_so,
	SpWR_started,
	SpWR_txrdy,
	SpWT_connecting,
	SpWT_do,
	SpWT_running,
	SpWT_so,
	SpWT_started,
	SpWT_txrdy,
	sampler_rx
);
input [7:0] DataRecv;
input [7:0] LEDOutput;
input  SpWR_connecting;
input  SpWR_do;
input  SpWR_running;
input  SpWR_rxFlag;
input  SpWR_rxValid;
input  SpWR_so;
input  SpWR_started;
input  SpWR_txrdy;
input  SpWT_connecting;
input  SpWT_do;
input  SpWT_running;
input  SpWT_so;
input  SpWT_started;
input  SpWT_txrdy;
input sampler_rx;

reg [7:0] DataRecv_expected;
reg [7:0] LEDOutput_expected;
reg  SpWR_connecting_expected;
reg  SpWR_do_expected;
reg  SpWR_running_expected;
reg  SpWR_rxFlag_expected;
reg  SpWR_rxValid_expected;
reg  SpWR_so_expected;
reg  SpWR_started_expected;
reg  SpWR_txrdy_expected;
reg  SpWT_connecting_expected;
reg  SpWT_do_expected;
reg  SpWT_running_expected;
reg  SpWT_so_expected;
reg  SpWT_started_expected;
reg  SpWT_txrdy_expected;

reg [7:0] DataRecv_prev;
reg [7:0] LEDOutput_prev;
reg  SpWR_connecting_prev;
reg  SpWR_do_prev;
reg  SpWR_running_prev;
reg  SpWR_rxFlag_prev;
reg  SpWR_rxValid_prev;
reg  SpWR_so_prev;
reg  SpWR_started_prev;
reg  SpWR_txrdy_prev;
reg  SpWT_connecting_prev;
reg  SpWT_do_prev;
reg  SpWT_running_prev;
reg  SpWT_so_prev;
reg  SpWT_started_prev;
reg  SpWT_txrdy_prev;

reg [7:0] DataRecv_expected_prev;
reg [7:0] LEDOutput_expected_prev;
reg  SpWR_connecting_expected_prev;
reg  SpWR_do_expected_prev;
reg  SpWR_running_expected_prev;
reg  SpWR_rxFlag_expected_prev;
reg  SpWR_rxValid_expected_prev;
reg  SpWR_so_expected_prev;
reg  SpWR_started_expected_prev;
reg  SpWR_txrdy_expected_prev;
reg  SpWT_connecting_expected_prev;
reg  SpWT_do_expected_prev;
reg  SpWT_running_expected_prev;
reg  SpWT_so_expected_prev;
reg  SpWT_started_expected_prev;
reg  SpWT_txrdy_expected_prev;

reg [7:0] last_DataRecv_exp;
reg [7:0] last_LEDOutput_exp;
reg  last_SpWR_connecting_exp;
reg  last_SpWR_do_exp;
reg  last_SpWR_running_exp;
reg  last_SpWR_rxFlag_exp;
reg  last_SpWR_rxValid_exp;
reg  last_SpWR_so_exp;
reg  last_SpWR_started_exp;
reg  last_SpWR_txrdy_exp;
reg  last_SpWT_connecting_exp;
reg  last_SpWT_do_exp;
reg  last_SpWT_running_exp;
reg  last_SpWT_so_exp;
reg  last_SpWT_started_exp;
reg  last_SpWT_txrdy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataRecv_prev = DataRecv;
	LEDOutput_prev = LEDOutput;
	SpWR_connecting_prev = SpWR_connecting;
	SpWR_do_prev = SpWR_do;
	SpWR_running_prev = SpWR_running;
	SpWR_rxFlag_prev = SpWR_rxFlag;
	SpWR_rxValid_prev = SpWR_rxValid;
	SpWR_so_prev = SpWR_so;
	SpWR_started_prev = SpWR_started;
	SpWR_txrdy_prev = SpWR_txrdy;
	SpWT_connecting_prev = SpWT_connecting;
	SpWT_do_prev = SpWT_do;
	SpWT_running_prev = SpWT_running;
	SpWT_so_prev = SpWT_so;
	SpWT_started_prev = SpWT_started;
	SpWT_txrdy_prev = SpWT_txrdy;
end

// update expected /o prevs

always @(trigger)
begin
	DataRecv_expected_prev = DataRecv_expected;
	LEDOutput_expected_prev = LEDOutput_expected;
	SpWR_connecting_expected_prev = SpWR_connecting_expected;
	SpWR_do_expected_prev = SpWR_do_expected;
	SpWR_running_expected_prev = SpWR_running_expected;
	SpWR_rxFlag_expected_prev = SpWR_rxFlag_expected;
	SpWR_rxValid_expected_prev = SpWR_rxValid_expected;
	SpWR_so_expected_prev = SpWR_so_expected;
	SpWR_started_expected_prev = SpWR_started_expected;
	SpWR_txrdy_expected_prev = SpWR_txrdy_expected;
	SpWT_connecting_expected_prev = SpWT_connecting_expected;
	SpWT_do_expected_prev = SpWT_do_expected;
	SpWT_running_expected_prev = SpWT_running_expected;
	SpWT_so_expected_prev = SpWT_so_expected;
	SpWT_started_expected_prev = SpWT_started_expected;
	SpWT_txrdy_expected_prev = SpWT_txrdy_expected;
end


// expected DataRecv[ 7 ]
initial
begin
	DataRecv_expected[7] = 1'bX;
end 
// expected DataRecv[ 6 ]
initial
begin
	DataRecv_expected[6] = 1'bX;
end 
// expected DataRecv[ 5 ]
initial
begin
	DataRecv_expected[5] = 1'bX;
end 
// expected DataRecv[ 4 ]
initial
begin
	DataRecv_expected[4] = 1'bX;
end 
// expected DataRecv[ 3 ]
initial
begin
	DataRecv_expected[3] = 1'bX;
end 
// expected DataRecv[ 2 ]
initial
begin
	DataRecv_expected[2] = 1'bX;
end 
// expected DataRecv[ 1 ]
initial
begin
	DataRecv_expected[1] = 1'bX;
end 
// expected DataRecv[ 0 ]
initial
begin
	DataRecv_expected[0] = 1'bX;
end 
// expected LEDOutput[ 7 ]
initial
begin
	LEDOutput_expected[7] = 1'bX;
end 
// expected LEDOutput[ 6 ]
initial
begin
	LEDOutput_expected[6] = 1'bX;
end 
// expected LEDOutput[ 5 ]
initial
begin
	LEDOutput_expected[5] = 1'bX;
end 
// expected LEDOutput[ 4 ]
initial
begin
	LEDOutput_expected[4] = 1'bX;
end 
// expected LEDOutput[ 3 ]
initial
begin
	LEDOutput_expected[3] = 1'bX;
end 
// expected LEDOutput[ 2 ]
initial
begin
	LEDOutput_expected[2] = 1'bX;
end 
// expected LEDOutput[ 1 ]
initial
begin
	LEDOutput_expected[1] = 1'bX;
end 
// expected LEDOutput[ 0 ]
initial
begin
	LEDOutput_expected[0] = 1'bX;
end 

// expected SpWR_connecting
initial
begin
	SpWR_connecting_expected = 1'bX;
end 

// expected SpWR_do
initial
begin
	SpWR_do_expected = 1'bX;
end 

// expected SpWR_running
initial
begin
	SpWR_running_expected = 1'bX;
end 

// expected SpWR_rxFlag
initial
begin
	SpWR_rxFlag_expected = 1'bX;
end 

// expected SpWR_rxValid
initial
begin
	SpWR_rxValid_expected = 1'bX;
end 

// expected SpWR_so
initial
begin
	SpWR_so_expected = 1'bX;
end 

// expected SpWR_started
initial
begin
	SpWR_started_expected = 1'bX;
end 

// expected SpWR_txrdy
initial
begin
	SpWR_txrdy_expected = 1'bX;
end 

// expected SpWT_connecting
initial
begin
	SpWT_connecting_expected = 1'bX;
end 

// expected SpWT_do
initial
begin
	SpWT_do_expected = 1'bX;
end 

// expected SpWT_running
initial
begin
	SpWT_running_expected = 1'bX;
end 

// expected SpWT_so
initial
begin
	SpWT_so_expected = 1'bX;
end 

// expected SpWT_started
initial
begin
	SpWT_started_expected = 1'bX;
end 

// expected SpWT_txrdy
initial
begin
	SpWT_txrdy_expected = 1'bX;
end 
// generate trigger
always @(DataRecv_expected or DataRecv or LEDOutput_expected or LEDOutput or SpWR_connecting_expected or SpWR_connecting or SpWR_do_expected or SpWR_do or SpWR_running_expected or SpWR_running or SpWR_rxFlag_expected or SpWR_rxFlag or SpWR_rxValid_expected or SpWR_rxValid or SpWR_so_expected or SpWR_so or SpWR_started_expected or SpWR_started or SpWR_txrdy_expected or SpWR_txrdy or SpWT_connecting_expected or SpWT_connecting or SpWT_do_expected or SpWT_do or SpWT_running_expected or SpWT_running or SpWT_so_expected or SpWT_so or SpWT_started_expected or SpWT_started or SpWT_txrdy_expected or SpWT_txrdy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataRecv = %b | expected LEDOutput = %b | expected SpWR_connecting = %b | expected SpWR_do = %b | expected SpWR_running = %b | expected SpWR_rxFlag = %b | expected SpWR_rxValid = %b | expected SpWR_so = %b | expected SpWR_started = %b | expected SpWR_txrdy = %b | expected SpWT_connecting = %b | expected SpWT_do = %b | expected SpWT_running = %b | expected SpWT_so = %b | expected SpWT_started = %b | expected SpWT_txrdy = %b | ",DataRecv_expected_prev,LEDOutput_expected_prev,SpWR_connecting_expected_prev,SpWR_do_expected_prev,SpWR_running_expected_prev,SpWR_rxFlag_expected_prev,SpWR_rxValid_expected_prev,SpWR_so_expected_prev,SpWR_started_expected_prev,SpWR_txrdy_expected_prev,SpWT_connecting_expected_prev,SpWT_do_expected_prev,SpWT_running_expected_prev,SpWT_so_expected_prev,SpWT_started_expected_prev,SpWT_txrdy_expected_prev);
	$display("| real DataRecv = %b | real LEDOutput = %b | real SpWR_connecting = %b | real SpWR_do = %b | real SpWR_running = %b | real SpWR_rxFlag = %b | real SpWR_rxValid = %b | real SpWR_so = %b | real SpWR_started = %b | real SpWR_txrdy = %b | real SpWT_connecting = %b | real SpWT_do = %b | real SpWT_running = %b | real SpWT_so = %b | real SpWT_started = %b | real SpWT_txrdy = %b | ",DataRecv_prev,LEDOutput_prev,SpWR_connecting_prev,SpWR_do_prev,SpWR_running_prev,SpWR_rxFlag_prev,SpWR_rxValid_prev,SpWR_so_prev,SpWR_started_prev,SpWR_txrdy_prev,SpWT_connecting_prev,SpWT_do_prev,SpWT_running_prev,SpWT_so_prev,SpWT_started_prev,SpWT_txrdy_prev);
`endif
	if (
		( DataRecv_expected_prev[0] !== 1'bx ) && ( DataRecv_prev[0] !== DataRecv_expected_prev[0] )
		&& ((DataRecv_expected_prev[0] !== last_DataRecv_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[0] = DataRecv_expected_prev[0];
	end
	if (
		( DataRecv_expected_prev[1] !== 1'bx ) && ( DataRecv_prev[1] !== DataRecv_expected_prev[1] )
		&& ((DataRecv_expected_prev[1] !== last_DataRecv_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[1] = DataRecv_expected_prev[1];
	end
	if (
		( DataRecv_expected_prev[2] !== 1'bx ) && ( DataRecv_prev[2] !== DataRecv_expected_prev[2] )
		&& ((DataRecv_expected_prev[2] !== last_DataRecv_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[2] = DataRecv_expected_prev[2];
	end
	if (
		( DataRecv_expected_prev[3] !== 1'bx ) && ( DataRecv_prev[3] !== DataRecv_expected_prev[3] )
		&& ((DataRecv_expected_prev[3] !== last_DataRecv_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[3] = DataRecv_expected_prev[3];
	end
	if (
		( DataRecv_expected_prev[4] !== 1'bx ) && ( DataRecv_prev[4] !== DataRecv_expected_prev[4] )
		&& ((DataRecv_expected_prev[4] !== last_DataRecv_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[4] = DataRecv_expected_prev[4];
	end
	if (
		( DataRecv_expected_prev[5] !== 1'bx ) && ( DataRecv_prev[5] !== DataRecv_expected_prev[5] )
		&& ((DataRecv_expected_prev[5] !== last_DataRecv_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[5] = DataRecv_expected_prev[5];
	end
	if (
		( DataRecv_expected_prev[6] !== 1'bx ) && ( DataRecv_prev[6] !== DataRecv_expected_prev[6] )
		&& ((DataRecv_expected_prev[6] !== last_DataRecv_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[6] = DataRecv_expected_prev[6];
	end
	if (
		( DataRecv_expected_prev[7] !== 1'bx ) && ( DataRecv_prev[7] !== DataRecv_expected_prev[7] )
		&& ((DataRecv_expected_prev[7] !== last_DataRecv_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRecv[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRecv_expected_prev);
		$display ("     Real value = %b", DataRecv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRecv_exp[7] = DataRecv_expected_prev[7];
	end
	if (
		( LEDOutput_expected_prev[0] !== 1'bx ) && ( LEDOutput_prev[0] !== LEDOutput_expected_prev[0] )
		&& ((LEDOutput_expected_prev[0] !== last_LEDOutput_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[0] = LEDOutput_expected_prev[0];
	end
	if (
		( LEDOutput_expected_prev[1] !== 1'bx ) && ( LEDOutput_prev[1] !== LEDOutput_expected_prev[1] )
		&& ((LEDOutput_expected_prev[1] !== last_LEDOutput_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[1] = LEDOutput_expected_prev[1];
	end
	if (
		( LEDOutput_expected_prev[2] !== 1'bx ) && ( LEDOutput_prev[2] !== LEDOutput_expected_prev[2] )
		&& ((LEDOutput_expected_prev[2] !== last_LEDOutput_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[2] = LEDOutput_expected_prev[2];
	end
	if (
		( LEDOutput_expected_prev[3] !== 1'bx ) && ( LEDOutput_prev[3] !== LEDOutput_expected_prev[3] )
		&& ((LEDOutput_expected_prev[3] !== last_LEDOutput_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[3] = LEDOutput_expected_prev[3];
	end
	if (
		( LEDOutput_expected_prev[4] !== 1'bx ) && ( LEDOutput_prev[4] !== LEDOutput_expected_prev[4] )
		&& ((LEDOutput_expected_prev[4] !== last_LEDOutput_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[4] = LEDOutput_expected_prev[4];
	end
	if (
		( LEDOutput_expected_prev[5] !== 1'bx ) && ( LEDOutput_prev[5] !== LEDOutput_expected_prev[5] )
		&& ((LEDOutput_expected_prev[5] !== last_LEDOutput_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[5] = LEDOutput_expected_prev[5];
	end
	if (
		( LEDOutput_expected_prev[6] !== 1'bx ) && ( LEDOutput_prev[6] !== LEDOutput_expected_prev[6] )
		&& ((LEDOutput_expected_prev[6] !== last_LEDOutput_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[6] = LEDOutput_expected_prev[6];
	end
	if (
		( LEDOutput_expected_prev[7] !== 1'bx ) && ( LEDOutput_prev[7] !== LEDOutput_expected_prev[7] )
		&& ((LEDOutput_expected_prev[7] !== last_LEDOutput_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDOutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDOutput_expected_prev);
		$display ("     Real value = %b", LEDOutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDOutput_exp[7] = LEDOutput_expected_prev[7];
	end
	if (
		( SpWR_connecting_expected_prev !== 1'bx ) && ( SpWR_connecting_prev !== SpWR_connecting_expected_prev )
		&& ((SpWR_connecting_expected_prev !== last_SpWR_connecting_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_connecting :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_connecting_expected_prev);
		$display ("     Real value = %b", SpWR_connecting_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SpWR_connecting_exp = SpWR_connecting_expected_prev;
	end
	if (
		( SpWR_do_expected_prev !== 1'bx ) && ( SpWR_do_prev !== SpWR_do_expected_prev )
		&& ((SpWR_do_expected_prev !== last_SpWR_do_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_do :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_do_expected_prev);
		$display ("     Real value = %b", SpWR_do_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SpWR_do_exp = SpWR_do_expected_prev;
	end
	if (
		( SpWR_running_expected_prev !== 1'bx ) && ( SpWR_running_prev !== SpWR_running_expected_prev )
		&& ((SpWR_running_expected_prev !== last_SpWR_running_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_running :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_running_expected_prev);
		$display ("     Real value = %b", SpWR_running_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SpWR_running_exp = SpWR_running_expected_prev;
	end
	if (
		( SpWR_rxFlag_expected_prev !== 1'bx ) && ( SpWR_rxFlag_prev !== SpWR_rxFlag_expected_prev )
		&& ((SpWR_rxFlag_expected_prev !== last_SpWR_rxFlag_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_rxFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_rxFlag_expected_prev);
		$display ("     Real value = %b", SpWR_rxFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SpWR_rxFlag_exp = SpWR_rxFlag_expected_prev;
	end
	if (
		( SpWR_rxValid_expected_prev !== 1'bx ) && ( SpWR_rxValid_prev !== SpWR_rxValid_expected_prev )
		&& ((SpWR_rxValid_expected_prev !== last_SpWR_rxValid_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_rxValid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_rxValid_expected_prev);
		$display ("     Real value = %b", SpWR_rxValid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SpWR_rxValid_exp = SpWR_rxValid_expected_prev;
	end
	if (
		( SpWR_so_expected_prev !== 1'bx ) && ( SpWR_so_prev !== SpWR_so_expected_prev )
		&& ((SpWR_so_expected_prev !== last_SpWR_so_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_so :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_so_expected_prev);
		$display ("     Real value = %b", SpWR_so_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SpWR_so_exp = SpWR_so_expected_prev;
	end
	if (
		( SpWR_started_expected_prev !== 1'bx ) && ( SpWR_started_prev !== SpWR_started_expected_prev )
		&& ((SpWR_started_expected_prev !== last_SpWR_started_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_started :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_started_expected_prev);
		$display ("     Real value = %b", SpWR_started_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SpWR_started_exp = SpWR_started_expected_prev;
	end
	if (
		( SpWR_txrdy_expected_prev !== 1'bx ) && ( SpWR_txrdy_prev !== SpWR_txrdy_expected_prev )
		&& ((SpWR_txrdy_expected_prev !== last_SpWR_txrdy_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWR_txrdy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWR_txrdy_expected_prev);
		$display ("     Real value = %b", SpWR_txrdy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SpWR_txrdy_exp = SpWR_txrdy_expected_prev;
	end
	if (
		( SpWT_connecting_expected_prev !== 1'bx ) && ( SpWT_connecting_prev !== SpWT_connecting_expected_prev )
		&& ((SpWT_connecting_expected_prev !== last_SpWT_connecting_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_connecting :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_connecting_expected_prev);
		$display ("     Real value = %b", SpWT_connecting_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_SpWT_connecting_exp = SpWT_connecting_expected_prev;
	end
	if (
		( SpWT_do_expected_prev !== 1'bx ) && ( SpWT_do_prev !== SpWT_do_expected_prev )
		&& ((SpWT_do_expected_prev !== last_SpWT_do_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_do :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_do_expected_prev);
		$display ("     Real value = %b", SpWT_do_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SpWT_do_exp = SpWT_do_expected_prev;
	end
	if (
		( SpWT_running_expected_prev !== 1'bx ) && ( SpWT_running_prev !== SpWT_running_expected_prev )
		&& ((SpWT_running_expected_prev !== last_SpWT_running_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_running :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_running_expected_prev);
		$display ("     Real value = %b", SpWT_running_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_SpWT_running_exp = SpWT_running_expected_prev;
	end
	if (
		( SpWT_so_expected_prev !== 1'bx ) && ( SpWT_so_prev !== SpWT_so_expected_prev )
		&& ((SpWT_so_expected_prev !== last_SpWT_so_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_so :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_so_expected_prev);
		$display ("     Real value = %b", SpWT_so_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SpWT_so_exp = SpWT_so_expected_prev;
	end
	if (
		( SpWT_started_expected_prev !== 1'bx ) && ( SpWT_started_prev !== SpWT_started_expected_prev )
		&& ((SpWT_started_expected_prev !== last_SpWT_started_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_started :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_started_expected_prev);
		$display ("     Real value = %b", SpWT_started_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_SpWT_started_exp = SpWT_started_expected_prev;
	end
	if (
		( SpWT_txrdy_expected_prev !== 1'bx ) && ( SpWT_txrdy_prev !== SpWT_txrdy_expected_prev )
		&& ((SpWT_txrdy_expected_prev !== last_SpWT_txrdy_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SpWT_txrdy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SpWT_txrdy_expected_prev);
		$display ("     Real value = %b", SpWT_txrdy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SpWT_txrdy_exp = SpWT_txrdy_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module spacewire_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg dff_reset;
reg SpWR_linkstart;
// wires                                               
wire [7:0] DataRecv;
wire [7:0] LEDOutput;
wire SpWR_connecting;
wire SpWR_do;
wire SpWR_running;
wire SpWR_rxFlag;
wire SpWR_rxValid;
wire SpWR_so;
wire SpWR_started;
wire SpWR_txrdy;
wire SpWT_connecting;
wire SpWT_do;
wire SpWT_running;
wire SpWT_so;
wire SpWT_started;
wire SpWT_txrdy;

wire sampler;                             

// assign statements (if any)                          
spacewire i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DataRecv(DataRecv),
	.dff_reset(dff_reset),
	.LEDOutput(LEDOutput),
	.SpWR_connecting(SpWR_connecting),
	.SpWR_do(SpWR_do),
	.SpWR_linkstart(SpWR_linkstart),
	.SpWR_running(SpWR_running),
	.SpWR_rxFlag(SpWR_rxFlag),
	.SpWR_rxValid(SpWR_rxValid),
	.SpWR_so(SpWR_so),
	.SpWR_started(SpWR_started),
	.SpWR_txrdy(SpWR_txrdy),
	.SpWT_connecting(SpWT_connecting),
	.SpWT_do(SpWT_do),
	.SpWT_running(SpWT_running),
	.SpWT_so(SpWT_so),
	.SpWT_started(SpWT_started),
	.SpWT_txrdy(SpWT_txrdy)
);

// CLK
initial
begin
	CLK = 1'b0;
end 

// dff_reset
initial
begin
	dff_reset = 1'b0;
end 

// SpWR_linkstart
initial
begin
	SpWR_linkstart = 1'b0;
end 

spacewire_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.dff_reset(dff_reset),
	.SpWR_linkstart(SpWR_linkstart),
	.sampler_tx(sampler)
);

spacewire_vlg_check_tst tb_out(
	.DataRecv(DataRecv),
	.LEDOutput(LEDOutput),
	.SpWR_connecting(SpWR_connecting),
	.SpWR_do(SpWR_do),
	.SpWR_running(SpWR_running),
	.SpWR_rxFlag(SpWR_rxFlag),
	.SpWR_rxValid(SpWR_rxValid),
	.SpWR_so(SpWR_so),
	.SpWR_started(SpWR_started),
	.SpWR_txrdy(SpWR_txrdy),
	.SpWT_connecting(SpWT_connecting),
	.SpWT_do(SpWT_do),
	.SpWT_running(SpWT_running),
	.SpWT_so(SpWT_so),
	.SpWT_started(SpWT_started),
	.SpWT_txrdy(SpWT_txrdy),
	.sampler_rx(sampler)
);
endmodule

